{"version":3,"file":"component---src-templates-blog-index-js-9e35b26cebddcd3f6842.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/templates/blog-index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(relativePath: {eq: \"profile-pic.png\"}) {\n        childImageSharp {\n          gatsbyImageData(layout: FULL_WIDTH)\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const avatar = data?.avatar?.childImageSharp?.gatsbyImageData\n\n  return (\n    <div className=\"bio\">\n      {avatar && (\n        <GatsbyImage\n          image={avatar}\n          alt={author?.name || ``}\n          className=\"bio-avatar\"\n          imgStyle={{\n            borderRadius: `50%`,\n          }}\n        />\n      )}\n      {author?.name && (\n        <div className=\"bio-summary\">\n          <p>\n            {author?.summary || null}\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogIndex = ({ data, location, pageContext }) => {\n    const siteTitle = data.site.siteMetadata?.title || `Title`\n    const posts = data.allMarkdownRemark.nodes\n    const currentPage = pageContext.currentPage\n    const numPages = pageContext.numPages\n    const isFirstPage = currentPage === 0\n    const isLastPage = currentPage === numPages - 1\n\n    if (posts.length === 0) {\n        return (\n            <Layout location={location} title={siteTitle}>\n                <SEO title=\"All posts\" />\n                <Bio />\n                <p>\n                    No blog posts found.\n                </p>\n            </Layout>\n        )\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <SEO title={isFirstPage ? \"Home\" : \"Page \" + currentPage} />\n            {isFirstPage && <Bio />}\n            <div className=\"blog-list\">\n                <ol style={{ listStyle: `none` }}>\n                    {posts.map(post => {\n                        const title = post.frontmatter.title || post.fields.slug\n                        const readTimeMinutes = post.timeToRead\n                        return (\n                            <li key={post.fields.slug}>\n                                <article\n                                    className=\"post-list-item\"\n                                    itemScope\n                                    itemType=\"http://schema.org/Article\"\n                                >\n                                    <header>\n                                        <h2>\n                                            <Link to={post.fields.slug} itemProp=\"url\">\n                                                <span itemProp=\"headline\">{title}</span>\n                                            </Link>\n                                        </h2>\n                                        <div>\n                                            <p>{post.frontmatter.date}<span className=\"gr\">·</span> {readTimeMinutes} min read</p>\n                                        </div>\n                                    </header>\n                                    <section>\n                                        <p\n                                            dangerouslySetInnerHTML={{\n                                                __html: post.frontmatter.description || post.excerpt,\n                                            }}\n                                            itemProp=\"description\"\n                                        />\n                                    </section>\n                                </article>\n                            </li>\n                        )\n                    })}\n                </ol>\n            </div>\n            <hr />\n            <div className=\"pagination\">\n                <ul>\n                    {!isFirstPage && (\n                        <Link to={currentPage - 1 === 0 ? '/' : `/page/${currentPage - 1}`} rel=\"prev\">\n                            ← Previous Page\n                        </Link>\n                    )}\n                    {\n                        Array.from({ length: numPages }, (_, i) => (\n                            <li\n                                key={`pagination-number-${i}`}\n                                style={{\n                                    margin: 0,\n                                }}\n                            >\n                                <Link to={`${i === 0 ? '/' : `/page/${i}`}`} className={`${i === currentPage ? 'active' : 'inactive'}`}>\n                                    {`${i === 0 ? 'Home' : `${i}`}`}\n                                </Link>\n                            </li>\n                        ))\n                    }\n                    {!isLastPage && (\n                        <Link to={`/page/${currentPage + 1}`} rel=\"next\">\n                            Next Page →\n                        </Link>\n                    )}\n                </ul>\n            </div>\n        </Layout>\n    )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\nquery blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: {frontmatter: {date: DESC}}, limit: $limit, skip: $skip) {\n      nodes {\n        excerpt(pruneLength: 250)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"Do MMMM YYYY\")\n          title\n          description\n        }\n        timeToRead\n      }\n    }\n}\n`"],"names":["Bio","_data$site$siteMetada","_data$avatar","_data$avatar$childIma","data","useStaticQuery","author","site","siteMetadata","avatar","childImageSharp","gatsbyImageData","React","className","GatsbyImage","image","alt","name","imgStyle","borderRadius","summary","_ref","location","pageContext","siteTitle","title","posts","allMarkdownRemark","nodes","currentPage","numPages","isFirstPage","isLastPage","length","Layout","SEO","style","listStyle","map","post","frontmatter","fields","slug","readTimeMinutes","timeToRead","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","rel","Array","from","_","i","margin"],"sourceRoot":""}