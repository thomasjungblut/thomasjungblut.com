{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogger/apache-hama-realtime-processing/","result":{"data":{"site":{"siteMetadata":{"title":"Coding with Thomas"}},"markdownRemark":{"id":"36602d57-d098-56e8-bd0e-bcbafa49847c","excerpt":"Hi there, today is about realtime processing with Apache Hama. One day, Edward told me about a guy, who told him, that he uses Hama for realtime processing. At…","html":"<p>Hi there,</p>\n<p>today is about realtime processing with Apache Hama.<br>\nOne day, <a href=\"https://twitter.com/#!/eddieyoon\">Edward</a> told me about a guy, who told him, that he uses Hama for realtime processing.</p>\n<p>At first this is quite a strange/new thing, because inherently BSP is used (just like MapReduce) for batch processing. It has several advantages over MapReduce, especially in graph and mathematical use cases.</p>\n<p>I think this new “feature” is the greatest advantage over MapReduce.<br>\nLet me clarify a bit how it works.</p>\n<p>At first you will have some tasks which are going to be our so called <strong>event collectors</strong>. In my example this will be a single master task.<br>\nAnyways, the trick is now that the event collectors are waiting for new events to come, or even poll for new events that happened, they do it in a while loop. Something which is possible in MapReduce though.</p>\n<p>Now you can built a <a href=\"http://zone.ni.com/devzone/cda/tut/p/id/3023\">producer/consumer pattern</a> on top of this. Which just says, your <strong>event collectors</strong> are messaging <strong>computation tasks</strong> to do some computation on the data we have just sent. This will allow you to do more complex stream analysis in near-realtime.<br>\nWe will see this in an example a bit later.</p>\n<p><strong>Why is this better than a MapReduce job?</strong></p>\n<p>If you run a MapReduce job, you can straight poll for data available inside a while loop, too. But without a messaging system between the tasks you are forced to write your data into HDFS to make it available for a broader amount of tasks to parallelize your workload.<br>\nSince Hadoop has lots of job scheduling and setup overhead, this is not realtime anymore. That is now degenerating to batch processing.<br>\nFor those of you who are familiar with <a href=\"http://incubator.apache.org/giraph/\">Giraph</a>, it is similar to that MapReduce Job, where tasks messaging with other MapReduce tasks. Sadly they just focused on graph computing and are strongly dependend on input from filesytem.</p>\n<p><strong>Example: Realtime Twitter Message Processing</strong></p>\n<p>Yes, we can analyse Twitter data streams in BSP in realtime!<br>\nWhat do we need?</p>\n<ul>\n<li>Twitter Library, in this case Twitter4J</li>\n<li>Latest Hama, in this case this is a 0.4.0 snapshot. You can use 3.0 as well, with minor code changes.</li>\n</ul>\n<p>Let’s dive directly into it and look how to setup the job.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">HamaConfiguration</span> conf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HamaConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">// set the user we want to analyse  </span>\n    conf<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"twitter.user.name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tjungblut\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">// I'm always testing in localmode so I use 2 tasks.  </span>\n    conf<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bsp.local.tasks.maximum\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">BSPJob</span> bsp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BSPJob</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    bsp<span class=\"token punctuation\">.</span><span class=\"token function\">setJobName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Twitter stream processing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    bsp<span class=\"token punctuation\">.</span><span class=\"token function\">setBspClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataStreamProcessing</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    bsp<span class=\"token punctuation\">.</span><span class=\"token function\">waitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>I think this is pretty standard, the trick is here to set the desired username of the guy who you want to analyse.<br>\nIn my case this is my twitter nick “tjungblut”.</p>\n<p>I omit the setup method and the fields now, if you have questions on what I’ve done there, feel free to comment on this post.</p>\n<p><strong>The real (time) processing</strong><br>\nLet’s step directly to the processing and the mimic of the producer/consumer pattern.<br>\nThe idea is simple: A master task is polling for new “Tweets” and is sending this directly to our computation tasks (fieldname is otherPeers, which contains all tasks but the master task).<br>\nThis happens while our computation tasks are waiting for new “food” to arrive.<br>\nOnce our computation tasks get a message, they can directly start with their computation.</p>\n<p>Let’s see how the master tasks is doing the job:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bsp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSPPeer</span> bspPeer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span>  \n      <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMaster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token comment\">// this should get us the least 20 tweets of this user  </span>\n          <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Status</span><span class=\"token punctuation\">></span></span> statuses <span class=\"token operator\">=</span> twitter<span class=\"token punctuation\">.</span><span class=\"token function\">getUserTimeline</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Status</span> s <span class=\"token operator\">:</span> statuses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token comment\">// deduplicate  </span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>alreadyProcessedStatusses<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got new status from: \"</span>  \n                  <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" with message \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n              <span class=\"token comment\">// we distribute messages to the other peers for  </span>\n              <span class=\"token comment\">// processing via user id partitioning  </span>\n              <span class=\"token comment\">// so a task gets all messages for a user  </span>\n              bspPeer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>  \n                  otherPeers\\<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> otherPeers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">LongMessage</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token comment\">// sync before we get new statusses again.  </span>\n          bspPeer<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// computation task stuff  </span></code></pre></div>\n<p>Note: I’ve ommitted a lot of details (try/catchs) and pre-mature optimizations which can be found in the code.</p>\n<p>As you can see the event collector (aka master task) is polling the twitter API to get the newest tweets of a given user.<br>\nNow the master is sending the new messages to our computation task.<br>\nNote that there is a simple trick to distribute the work equally to the tasks. In our case we have just a single user we are listening on, and two tasks. So this won’t do anything but sending this directly to another task.<br>\nYou can change this behaviour by either listening to the public timeline or changing the distribution of the message by using the message id instead of the user id. I hope you get the gist ;)</p>\n<p>In short: We are listening to a specific user and therefore every message goes from the collector directly to the computation task. In our case we have only 2 tasks, so increasing the tasks will just cause one task to be idle the whole time.</p>\n<p>Let’s have a look at the slave task (aka computation task).</p>\n<p>This is very simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// we are not the master task... so lets do this:  </span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">// wait for some work...  </span>\n        bspPeer<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">LongMessage</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LongMessage</span><span class=\"token punctuation\">)</span> bspPeer<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got work in form of text: \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n              <span class=\"token operator\">+</span> <span class=\"token string\">\" for the userid: \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n      <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n</code></pre></div>\n<p>As you can see, this is a pretty simple consumer.<br>\nYou could now add some logic to it. For example to track the communication between a person and others: How often, how much and what content.</p>\n<p>In my case, this looks like this:<br>\n<a href=\"http://2.bp.blogspot.com/-6MS0x-aEbys/TqWlhBnqlhI/AAAAAAAAAV4/I8F_P9Ou0Z0/s1600/hama-realtime.PNG\"><img src=\"http://2.bp.blogspot.com/-6MS0x-aEbys/TqWlhBnqlhI/AAAAAAAAAV4/I8F_P9Ou0Z0/s320/hama-realtime.PNG\" alt=\"\"></a></p>\n<p>Note that it directly came up after it has been send.<br>\nNow, this is a real cool thing!</p>\n<p><strong>Imagine:</strong></p>\n<p>If you would have unlimited access to the public timeline (sadly this is capped by 150 requests/h) and you have enough computational power in your cluster, you can do your own trending topics!</p>\n<p><a href=\"http://2.bp.blogspot.com/-LkdKw6IG5Tw/TqWmN0PwYaI/AAAAAAAAAWA/ua7DRkD3CHw/s1600/twittertrends.PNG\"><img src=\"http://2.bp.blogspot.com/-LkdKw6IG5Tw/TqWmN0PwYaI/AAAAAAAAAWA/ua7DRkD3CHw/s1600/twittertrends.PNG\" alt=\"\"></a></p>\n<p>Of course you can do everything else you want to.</p>\n<p>I hope this has been quite “illuminating” for you and shows you how to enable realtime processing if you have Hama.</p>\n<p>Of course you can checkout my sourcecode my github. The class we just talked about is available here:</p>\n<p><a href=\"https://github.com/thomasjungblut/thomasjungblut-common/blob/master/src/de/jungblut/bsp/DataStreamProcessing.java\">https://github.com/thomasjungblut/thomasjungblut-common/blob/master/src/de/jungblut/bsp/DataStreamProcessing.java</a></p>\n<p>Have fun and good luck!</p>","frontmatter":{"title":"Apache Hama realtime processing","date":"24th October 2011","description":null},"tableOfContents":"","timeToRead":4},"previous":{"fields":{"slug":"/blogger/apache-hama-upcoming-features/"},"frontmatter":{"title":"Apache Hama upcoming features"}},"next":{"fields":{"slug":"/blogger/k-means-clustering-with-bsp-intuition/"},"frontmatter":{"title":"k-Means Clustering with BSP (Intuition)"}}},"pageContext":{"id":"36602d57-d098-56e8-bd0e-bcbafa49847c","previousPostId":"c2335e32-9e7b-5c2a-9c9a-d74b7afda9d4","nextPostId":"58b5ef3f-6752-52fe-a344-0ecf6b1e0971"}},"staticQueryHashes":["2270107033","2841359383"],"slicesMap":{}}