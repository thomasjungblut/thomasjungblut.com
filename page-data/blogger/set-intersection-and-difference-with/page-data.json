{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogger/set-intersection-and-difference-with/","result":{"data":{"site":{"siteMetadata":{"title":"Coding with Thomas"}},"markdownRemark":{"id":"cc847453-c74b-58b5-98f9-0dbac40293f9","excerpt":"Hi there, first off a short message: I am currently a bit busy so I need a bit of time for the BSP K-Means-Clustering I promised in one of the previous posts. I…","html":"<p>Hi there,</p>\n<p>first off a short message:<br>\nI am currently a bit busy so I need a bit of time for the BSP K-Means-Clustering I promised in one of the previous posts. I am going to contribute this as an example for Apache Hama and not for my GSoC trunk (where to you can find a link now on the right below the twitter box!). Although I am going to setup a github to store my new code things. I’ll link this on the sidebar, too.</p>\n<p><strong>The real beginning</strong></p>\n<p>So I came across <a href=\"http://stackoverflow.com/questions/6469171/computing-set-intersection-and-set-difference-of-the-records-of-two-files-with-ha\">a question on stackoverflow</a> some days ago. It was about computing the set-intersection and -difference with Hadoop’s MapReduce. I simply wanted to share my solution with you, this is the main reason of this blog post.</p>\n<p>The question was about only two files, we are going to scale this up to “n”-files since this is why we need hadoop ;)</p>\n<p><strong>The input</strong></p>\n<p>Let’s assume (like in the question) that we have a file that is looking like this:</p>\n<blockquote>\n<p><em>File 1 contains following lines:</em></p>\n<blockquote>\n<p>a<br>\nb<br>\nc</p>\n</blockquote>\n<p><em>File 2 contains following lines:</em></p>\n<blockquote>\n<p>a<br>\nd</p>\n</blockquote>\n</blockquote>\n<p>Actually it is pretty simple, we have to make sure that these lines are stored in different text files.</p>\n<p><strong>The Mapper</strong></p>\n<p>The main focus and trick in the mapper is how to get the name of the file the task is currently working on.<br>\nLet’s have a look at my mapper implementation, called FileMapper:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LongWritable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">static</span> <span class=\"token class-name\">Text</span> fileName<span class=\"token punctuation\">;</span>  \n  \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LongWritable</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span>  \n          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n       context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span>  \n          <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileSplit</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getInputSplit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       fileName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n</code></pre></div>\n<p>The trick is that when we are importing textfiles, the input split is of the type filesplit which let’s you get the path and the name of the file.</p>\n<p>The main problem is here to know how many files you’ve got at all. There can be a nifty hack to just emit the first line of the mapper output with a key that is guranteed to be the first input in our reducer like a plain “a”. This is the last line in the setup method.</p>\n<p>Now we are going to emit each text line as the key and the filename as the value.<br>\nThen we get a bunch of key / values that look like this, key and value are seperated by space and assuming the files names are File1 and File2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    a File1 // nifty haxx  \n    b File1  \n    c File1  \n    d File1  \n  \n    a File2 // nifty haxx  \n    d File2  \n    e File2  \n</code></pre></div>\n<p>Obviously reducing them will get you an input like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    a File1,File2 // our nifty hack :))  \n    b File1  \n    c File1  \n    d File1,File2  \n    e File2  \n</code></pre></div>\n<p>Once again pretty straightforward. Now we can see a clear structure and know what we have to do in our reducer.</p>\n<p><strong>The Reducer</strong></p>\n<p>Now let’s have a look at our reducer:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileReducer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Reducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fileNameSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n      \n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token constant\">LINES_IN_COMMON</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span>  \n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">// add for our first key every file to our set  </span>\n        <span class=\"token comment\">// make sure that this action is the first of the entire reduce step  </span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span> t <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                fileNameSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token comment\">// now add evey incoming value to a temp set  </span>\n            <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span> t <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n              \n            <span class=\"token comment\">// perform checks  </span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> fileNameSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n                <span class=\"token comment\">// we know that this must be an intersection of all files  </span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Counter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LINES_IN_COMMON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token comment\">// do anything what you want with the difference  </span>\n            <span class=\"token punctuation\">}</span>  \n   \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n</code></pre></div>\n<p>As you can see we are just using our “hack” to build a set of files we had in our input. And now we are just checking if we have full intersection over all files and incrementing a counter on that.</p>\n<p>What you’re doing with the set difference is left up to you, maybe you want to ignore them and do something with the intersecting lines.<br>\nHave a try with some files on project gutenberg! I would be pretty interested how many lines are equal in different books.</p>\n<p>Here in germany were some discussions about plagiarism, maybe this can be helpful to find intersection of many books / papers very fast.</p>\n<p>I’ve just wanted to point out a possible solution of how to deal with such a problem in mapreduce.</p>\n<p>Thanks for your attention and support :)</p>","frontmatter":{"title":"Set-intersection and -difference with Hadoop","date":"25th June 2011","description":null},"tableOfContents":"","timeToRead":3},"previous":{"fields":{"slug":"/blogger/k-means-clustering-with-mapreduce/"},"frontmatter":{"title":"k-Means Clustering with MapReduce"}},"next":{"fields":{"slug":"/blogger/dealing-with-outofmemoryerror-in-hadoop/"},"frontmatter":{"title":"Dealing with \"OutOfMemoryError\" in Hadoop"}}},"pageContext":{"id":"cc847453-c74b-58b5-98f9-0dbac40293f9","previousPostId":"7d5e20d0-c2ec-56f7-b244-43bfe0f2e7b0","nextPostId":"cf020bc8-3503-5f52-9d26-89e834dbf96e"}},"staticQueryHashes":["2270107033","2841359383"],"slicesMap":{}}