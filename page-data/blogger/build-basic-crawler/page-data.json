{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogger/build-basic-crawler/","result":{"data":{"site":{"siteMetadata":{"title":"Coding with Thomas"}},"markdownRemark":{"id":"1cb63642-01ae-5c4b-bde9-a1a9f6b6f5e0","excerpt":"So welcome to our first part of Building a news aggregation engine! This time we talk about how we build a really simple crawler, that crawls us some sites…","html":"<p>So welcome to our first part of <a href=\"http://codingwiththomas.blogspot.de/2013/01/building-news-aggregation-engine.html\">Building a news aggregation engine</a>!<br>\nThis time we talk about how we build a really simple crawler, that crawls us some sites. \nThe (more or less) <a href=\"http://en.wikipedia.org/wiki/Web_crawler\">formal definition of a crawler is stated in Wikipedia</a>:</p>\n<blockquote>\n<p>A <strong>Web crawler</strong> is a computer program that browses the <a href=\"http://en.wikipedia.org/wiki/World_Wide_Web\" title=\"World Wide Web\">World Wide Web</a> in a methodical, automated manner or in an orderly fashion.</p>\n</blockquote>\n<p>The basic workflow looks like that:</p>\n<ul>\n<li>Seed some URLs and <strong>queue</strong> them up</li>\n<li>Keep a <strong>set</strong> about what URLs were visited</li>\n<li>While our <strong>queue</strong> is not empty (or we reached some maximum amounts of sites)</li>\n<li>Get the first URL from the <strong>queue</strong>, put it into the visited <strong>set</strong></li>\n<li>Query the URL, obtain some HTML</li>\n<li>Extract new URLs from the HTML and <strong>queue</strong> them up if they are not in the visited <strong>set</strong> yet</li>\n</ul>\n<p>A small Java program could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> seedUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"http://www.wikipedia.com/\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> linksToCrawl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">final</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \nlinksToCrawl<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>seedUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nvisited<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>seedUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fetches <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>linksToCrawl<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token class-name\">String</span> urlToCrawl <span class=\"token operator\">=</span> linksToCrawl<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n      <span class=\"token comment\">// open a connection and parse HTML  </span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  \n      <span class=\"token comment\">// loop over all links we found on that page  </span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> outlink <span class=\"token operator\">:</span> extractedResult<span class=\"token punctuation\">.</span>outlinks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>outlink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            linksToCrawl<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>outlink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n      <span class=\"token punctuation\">}</span>  \n      fetches<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n</code></pre></div>\n<p>It looks really simple, but tell you what? It is more difficult than it looks.<br>\nOnce you started with it, you wish you never started with that- the web is ugly. I’m working in the backend team at work and I’m surrounded by a lot of garbage from various data sources, but the web is a whole new level. Just a small excerpt of what you need to deal with:</p>\n<ul>\n<li>Encoding issues (we will fix them later on in this post)</li>\n<li>Link expansions (relative vs. absolute URLs vs. JavaScript URLs like void(0); ) </li>\n<li>Not parsable stuff like videos or images</li>\n</ul>\n<p>So for example, how do you deal with data you can’t handle (which don’t contain HTML)? You IGNORE it.  For this kind of purpose I’ve clamped together a bunch of suffixes that can happen within links and they guard against running into not parsable binary data:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Pattern</span> <span class=\"token constant\">IGNORE_SUFFIX_PATTERN</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span>  \n      <span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\\*(\\\\\\\\.(css|js|bmp|gif|jpe?g|png|tiff?|mid|mp2|mp3|mp4|wav|avi|mov|mpeg|ram|m4v|pdf|iso|rm|smil|wmv|swf|wma|zip|rar|gz))$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So as you can see, I’m guarding against anything here. Of course they are completely useless if someone does not supply a suffix of the filetype. In the latter case, you will need to get on the stream and look for a html or body tag to verify it is really a website (which is the worst case, because you’re wasting bandwidth and time the crawler could use to do something else).</p>\n<p>Something that poked me for quite a while were encoding issues. As a german, umlauts like <em>öäüß</em> are completely garbled if you read them with the wrong encoding. So most of the time, germany news look really bad and you can directly throw them into the next trash bin.</p>\n<p>I ran across a project of the Mozilla foundation called <strong>universalchardet</strong> (abbrev. for universal charset detector) and <a href=\"http://code.google.com/p/juniversalchardet/\">its Java descendent called <strong>juniversalchardet</strong></a>. It detects encodings with really high accuracy and helps you to get the content of your crawl correct like you would browse the site.</p>\n<p>In Java you have to obtain the site via streams, so let me show you a small example of <strong>juniversalchardet</strong> and how to read a stream into a string of HTML with NIO.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token class-name\">String</span> someURLAsString <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.facebook.com\"</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>someURLAsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token class-name\">InputStream</span> stream <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token class-name\">String</span> html <span class=\"token operator\">=</span> <span class=\"token function\">consumeStream</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    \n<span class=\"token comment\">// the helper methods  </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">consumeStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// setup the universal detector for charsets  </span>\n    <span class=\"token class-name\">UniversalDetector</span> detector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UniversalDetector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">ReadableByteChannel</span> bc <span class=\"token operator\">=</span> <span class=\"token class-name\">Channels</span><span class=\"token punctuation\">.</span><span class=\"token function\">newChannel</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">// allocate a byte buffer of BUFFER\\_SIZE size   </span>\n    <span class=\"token comment\">// 1mb is enough for every usual webpage  </span>\n    <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BUFFER</span>\\_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span> read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> bc<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token comment\">// let the detector work on the downloaded chunk  </span>\n      detector<span class=\"token punctuation\">.</span><span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> read<span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n      <span class=\"token comment\">// check if we found a larger site, then resize the buffer  </span>\n      buffer <span class=\"token operator\">=</span> <span class=\"token function\">resizeBuffer</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token comment\">// finish the sequence  </span>\n    detector<span class=\"token punctuation\">.</span><span class=\"token function\">dataEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">// copy the result back to a byte array  </span>\n    <span class=\"token class-name\">String</span> encoding <span class=\"token operator\">=</span> detector<span class=\"token punctuation\">.</span><span class=\"token function\">getDetectedCharset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token comment\">// obtain the encoding, if null fall back to UTF-8  </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n        encoding <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"UTF-8\"</span> <span class=\"token operator\">:</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      stream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token comment\">// basic resize operation when 90% of the buffer is occupied</span>\n<span class=\"token comment\">// simply double the correct size and copy the buffer  </span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ByteBuffer</span> <span class=\"token function\">resizeBuffer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token class-name\">ByteBuffer</span> result <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>  \n  <span class=\"token comment\">// double the size if we have only 10% capacity left  </span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \\<span class=\"token operator\">*</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    result <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \\<span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    result<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n</code></pre></div>\n<p>That is actually everything to know about getting HTML from a raw URL.</p>\n<p><strong>But, how do you extract the outlinks from a HTML page?</strong></p>\n<p>Many of you will now go ahead and say: let’s compile some RegEx. You will <strong>FAIL</strong>.<br>\nAs a computer scientist it is enough if you tell that HTML is a context free grammar (chomsky type 2) and RegEx needs a regular language (type 3) to operate properly. Type 2 languages are way more complex and can’t be parsed with a regular expression. So please have a look at the <a href=\"http://stackoverflow.com/a/1732454/540873\">funny rage answer at stackoverflow</a> or read up the other very informative answers at the bottom to know why you shouldn’t do this. Don’t get me wrong: You will find URLs that you can parse with RegEx, but I don’t think it is worth the stress. I always use the <a href=\"http://htmlparser.sourceforge.net/\">htmlparser on sourceforge</a>, it is clean, well tested and pretty fast.</p>\n<p>To end this post, I tell you how to extract some outlinks from a html page as string:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">NodeFilter</span> <span class=\"token constant\">LINK</span>\\_FILTER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeClassFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkTag</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token class-name\">Parser</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parser</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token class-name\">NodeList</span> matches <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">extractAllNodesThatMatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LINK</span>\\_FILTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token class-name\">SimpleNodeIterator</span> it <span class=\"token operator\">=</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token class-name\">LinkTag</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkTag</span><span class=\"token punctuation\">)</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">nextNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token class-name\">String</span> link <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token comment\">// now expand for relative urls and store somewhere  </span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>It is simple as that. How expanding of URLs can be done is another part- but I leave that up to you ;-) <a href=\"http://docs.oracle.com/javase/7/docs/api/java/net/URI.html\">Java’s URI may help you with that.</a></p>\n<p>So thanks for attending, my next post is about how to extract actual text content (news) from pure HTML code.</p>","frontmatter":{"title":"Build a basic crawler","date":"1st January 2013","description":null},"tableOfContents":"","timeToRead":4},"previous":{"fields":{"slug":"/blogger/building-news-aggregation-engine/"},"frontmatter":{"title":"Building a news aggregation engine"}},"next":{"fields":{"slug":"/blogger/extracting-articles-from-crawled-html/"},"frontmatter":{"title":"Extracting articles from crawled HTML sites"}}},"pageContext":{"id":"1cb63642-01ae-5c4b-bde9-a1a9f6b6f5e0","previousPostId":"2a03381a-99fa-5a2a-bc5e-5ab5afe0b058","nextPostId":"509aa5be-1842-5c1b-acc7-5bfc8f240a3f"}},"staticQueryHashes":["2270107033","2841359383"],"slicesMap":{}}