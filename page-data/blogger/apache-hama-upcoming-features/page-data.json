{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogger/apache-hama-upcoming-features/","result":{"data":{"site":{"siteMetadata":{"title":"Coding with Thomas"}},"markdownRemark":{"id":"c2335e32-9e7b-5c2a-9c9a-d74b7afda9d4","excerpt":"Hi all, for me it is a pleasure to bring you a couple new things and announcements in this blog post. Apache Hama 4.0 is on its way, and I want to introduce…","html":"<p>Hi all,</p>\n<p>for me it is a pleasure to bring you a couple new things and announcements in this blog post.</p>\n<p>Apache Hama 4.0 is on its way, and I want to introduce several pieces of fancyness before we dive into the realtime processing (will be the follow up blog post).</p>\n<ol>\n<li>Revised BSP execution flow</li>\n<li>Multiple Tasks per groom</li>\n<li>YARN integration </li>\n</ol>\n<p><strong>Revised BSP execution flow</strong></p>\n<p>The first point is a very good improvement. Writing BSP is totally convenient now.</p>\n<p>Let’s take a look at the implementation of a BSP in Hama 3.0:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OldBSP</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BSP</span><span class=\"token punctuation\">{</span>  \n  \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bsp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSPPeerProtocol</span> arg0<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span>  \n      <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// TODO Auto-generated method stub  </span>\n  <span class=\"token punctuation\">}</span>  \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setConf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configuration</span> conf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// TODO Auto-generated method stub  </span>\n  <span class=\"token punctuation\">}</span>  \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Configuration</span> <span class=\"token function\">getConf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// TODO Auto-generated method stub  </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n  \n</code></pre></div>\n<p>You see it in my eclipse generated subclass. You <strong>have to</strong> override a plenty of methods.<br>\nTwo of them (if you are not familiar with Hadoop) seem to be very strange. What is that configuration? And why do I need to set this in my code?</p>\n<p>Well, this is now history. We have revised the design and now shipping with default implementations of every method in the BSP class.</p>\n<p>Additionally we have added a setup and a cleanup method. Setup is now called before the computation starts, cleanup after your computation has been done.</p>\n<p>Let’s see:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewBSP</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BSP</span><span class=\"token punctuation\">{</span>  \n  \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSPPeer</span> peer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span>  \n      <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n    \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bsp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSPPeer</span> peer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span>  \n      <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">bsp</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n  <span class=\"token annotation punctuation\">@Override</span>  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSPPeer</span> peer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>peer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  \n  \n<span class=\"token punctuation\">}</span>  \n</code></pre></div>\n<p>It is a lot more intuitive isn’t it? Now YOU can control the methods you need to override. And it is fully transparent when the methods are called.</p>\n<p>And the best side-effect is that you can send messages and trigger a barrier sync while in setup!<br>\nThis enables you now to send initial messages to other tasks and distributed information which hasn’t been set in the configuration.<br>\nBTW: Your jobs configuration can now be obtained via peer.getConfiguration().</p>\n<p><strong>Multiple Tasks per groom</strong></p>\n<p>Yeah, we made the step to multitasking. In Hama 3.0 we only had a single task inside the groom.<br>\nThis didn’t really utilize the machines, because while executing a single BSP, other cores might be unused.<br>\nLike in Hadoop this is now configurable per host. So you can set the number of tasks which should be executed on a machine.</p>\n<p><strong>YARN integration</strong></p>\n<p>If you don’t know what YARN actually is, let me clarify a bit. YARN stands for <strong>Y</strong>et <strong>A</strong>nother <strong>R</strong>esource <strong>N</strong>egotiator.<br>\nThis is Hadoops new architecture. If you want to learn more, have a look at <a href=\"http://twitter.com/#!/acmurthy\">Aruns</a> slides <a href=\"http://www.slideshare.net/hortonworks/nextgen-apache-hadoop-mapreduce\">here</a>.</p>\n<p>If you now know what the new Hadoop is, I’m proud to tell you that Apache Hama will be a part of it.<br>\nWe implemented our own application to fit with the new YARN module and bring Hama to your Hadoop 23.0 cluster.<br>\nNo more setup and configuration of additional daemons!</p>\n<p>We managed to get a first BSP (Serialize Printing) running on a YARN cluster.</p>\n<p><a href=\"http://1.bp.blogspot.com/-NUl3Y1C_CBk/TqWYTGdMXNI/AAAAAAAAAVs/v63UzshyjjQ/s1600/yarn.png\"><img src=\"http://1.bp.blogspot.com/-NUl3Y1C_CBk/TqWYTGdMXNI/AAAAAAAAAVs/v63UzshyjjQ/s400/yarn.png\" alt=\"\"></a></p>\n<p>Serialize Printing on YARN</p>\n<p>That is soo great!</p>\n<p>We are still in development, so please follow <a href=\"https://issues.apache.org/jira/browse/HAMA-431\">HAMA-431</a> if you are interested.</p>\n<p>Thanks for your attention, and please follow us on the <a href=\"http://incubator.apache.org/hama/mail-lists.html\">mailing list</a>! We are happy to answer your questions if you have one.</p>","frontmatter":{"title":"Apache Hama upcoming features","date":"24th October 2011","description":null},"tableOfContents":"","timeToRead":2},"previous":{"fields":{"slug":"/blogger/ant-colony-optimization-for-tsp/"},"frontmatter":{"title":"Ant Colony Optimization for TSP Problems"}},"next":{"fields":{"slug":"/blogger/apache-hama-realtime-processing/"},"frontmatter":{"title":"Apache Hama realtime processing"}}},"pageContext":{"id":"c2335e32-9e7b-5c2a-9c9a-d74b7afda9d4","previousPostId":"76b5ebc4-91c3-5d4f-957c-9fd72740c5d6","nextPostId":"36602d57-d098-56e8-bd0e-bcbafa49847c"}},"staticQueryHashes":["2270107033","2841359383"],"slicesMap":{}}