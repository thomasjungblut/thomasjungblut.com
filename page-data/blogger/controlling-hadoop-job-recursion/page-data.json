{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogger/controlling-hadoop-job-recursion/","result":{"data":{"site":{"siteMetadata":{"title":"Coding with Thomas"}},"markdownRemark":{"id":"fef60276-987b-5ff2-bb6d-053747a34caf","excerpt":"This post is related to the previous post. Sometimes you coming along problems that need to be solved in a recursive manner. For example the graph exploration…","html":"<p>This post is related to the <a href=\"http://codingwiththomas.blogspot.com/2011/04/graph-exploration-with-hadoop-mapreduce.html\">previous post</a>.</p>\n<p>Sometimes you coming along problems that need to be solved in a recursive manner. For example the graph exploration algorithm in my previous post.<br>\nYou have to chain the jobs and let the next job work on the output of the previous job. And of course you need a breaking condition. This could either be a fixed limit of “how many recursions it should do” or “how many recursion it really does”.<br>\nLet me focus at the second breaking condition along with my graph exploration example.</p>\n<p><strong>Counter</strong><br>\nFirst off you should know that in Hadoop you have counters, you may see them after a job ran or in the Webinterface of the Jobtracker. “Famous” counters are the “Map input records” or the “Reduce output records”.<br>\nThe best of all is that we can setup our own counters, just with the use of enums.</p>\n<p><strong>How to setup Counter?</strong><br>\nThe simplest approach is to just define an enum like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">UpdateCounter</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token constant\">UPDATED</span>  \n <span class=\"token punctuation\">}</span>  \n</code></pre></div>\n<p>Now you can manipulate the counter using:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">context<span class=\"token punctuation\">.</span><span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UpdateCounter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>“context” is the context object you get from your mapper or your reducer.<br>\nThis line will obviously increment your update counter by 1.</p>\n<p><strong>How to fetch the counter?</strong></p>\n<p>This is as easy as setting up an enum. You are submitting a job like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Configuration</span> conf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token class-name\">Job</span> job <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Job</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \njob<span class=\"token punctuation\">.</span><span class=\"token function\">setJobName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Graph explorer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\njob<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DatasetImporter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \njob<span class=\"token punctuation\">.</span><span class=\"token function\">setReducerClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExplorationReducer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">// leave out the stuff with paths etc.  </span>\njob<span class=\"token punctuation\">.</span><span class=\"token function\">waitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>Be sure that the job has finished, using waitForCompletion is recommended. Querying the counter during runtime can end in strange results ;)<br>\nYou can access your counter like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> counter <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span><span class=\"token function\">getCounters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findCounter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExplorationReducer<span class=\"token punctuation\">.</span>UpdateCounter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATED</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p><strong>How to get the recursion running?</strong></p>\n<p>Now we know how to get the counter. Now setting up a recursion is quite simple. The only thing that you should watch for is already existing paths from older job runs.<br>\nLook at this snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// variable to keep track of the recursion depth  </span>\n<span class=\"token keyword\">int</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">// counter from the previous running import job  </span>\n<span class=\"token keyword\">long</span> counter <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span><span class=\"token function\">getCounters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findCounter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExplorationReducer<span class=\"token punctuation\">.</span>UpdateCounter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATED</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n  depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n   <span class=\"token comment\">// reuse the conf reference with a fresh object  </span>\n   conf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   <span class=\"token comment\">// set the depth into the configuration  </span>\n   conf<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recursion.depth\"</span><span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Job</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setJobName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Graph explorer \"</span> <span class=\"token operator\">+</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExplorationMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setReducerClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExplorationReducer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setJarByClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExplorationMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   <span class=\"token comment\">// always work on the path of the previous depth  </span>\n   in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files/graph-exploration/depth\\_\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files/graph-exploration/depth\\_\"</span> <span class=\"token operator\">+</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n   <span class=\"token class-name\">SequenceFileInputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">addInputPath</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   <span class=\"token comment\">// delete the outputpath if already exists  </span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n   <span class=\"token class-name\">SequenceFileOutputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOutputPath</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setInputFormatClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SequenceFileInputFormat</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputFormatClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SequenceFileOutputFormat</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputKeyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LongWritable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputValueClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VertexWritable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   <span class=\"token comment\">// wait for completion and update the counter  </span>\n   job<span class=\"token punctuation\">.</span><span class=\"token function\">waitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   depth<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n   counter <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span><span class=\"token function\">getCounters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findCounter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExplorationReducer<span class=\"token punctuation\">.</span>UpdateCounter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATED</span><span class=\"token punctuation\">)</span>  \n     <span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Note that if you never incremented your counter it will be always 0. Or it could be null of you never used it in your mapper or reducer.</p>\n<p>Full sourcecodes can always be found here:<br>\n<a href=\"http://code.google.com/p/hama-shortest-paths\">http://code.google.com/p/hama-shortest-paths/</a></p>","frontmatter":{"title":"Controlling Hadoop MapReduce Job recursion","date":"9th April 2011","description":null},"tableOfContents":"","timeToRead":2},"previous":{"fields":{"slug":"/blogger/graph-exploration-with-hadoop-mapreduce/"},"frontmatter":{"title":"Graph Exploration with Apache Hadoop and MapReduce"}},"next":{"fields":{"slug":"/blogger/graph-exploration-using-apache-hama-and/"},"frontmatter":{"title":"Graph Exploration with Apache Hama"}}},"pageContext":{"id":"fef60276-987b-5ff2-bb6d-053747a34caf","previousPostId":"b0f28283-b8f1-5d28-976f-653b973f4bb4","nextPostId":"e67a8629-bf17-5eeb-b54e-1775d53761e2"}},"staticQueryHashes":["2270107033","2841359383"],"slicesMap":{}}